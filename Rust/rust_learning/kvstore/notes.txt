Cargo.toml: Manifest file, contains information about our project through metadata. Dependencies and lots of other stuff can be listed in the manifest.

Macros: Has '!' at the end.


Type check with cargo check. Build with cargo build (type check and create binary) (cargo build --release for release build)
 - target contains build artefacts (including binary, located at /target/debug/<project_name>). 
 Note if build as release, folder is not 'debug'. Release build performs compiler optimizations.
 - Cargo.lock describes locked versions of dependencies we use
 - cargo run for build + run...

Everything is immutable by default. 
Std lib docs: https://doc.rust-lang.org/std/
Rust book: https://doc.rust-lang.org/book/


After having written the main stuff, create a new file identical and clean up the new file, so one is over commented and another is easy to read.

Ownership can be transfered via returns or putting stuff into datatypes as structs.
Notice: Dangling pointers are impossible, since when the owner drops the memory, Rust's type system ensures that slices cannot access the destroyed memory
